%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: HTML (Nunjucks-toolbox)
file_extensions:
  - nunjucks
  - nunjs
  - njk
  - html
first_line_match: (?i:<!DOCTYPE\s+html|<html)
scope: text.html.nunjucks-toolbox

variables:
  # Nunjucks template tags
  nunjucks_tags: (?:autoescape|endautoescape|block|endblock|extends|include|import|from|macro|endmacro|call|endcall|filter|endfilter|set|if|elif|else|endif|for|endfor|asyncEach|endasyncEach|asyncAll|endasyncAll|while|endwhile|break|continue|raw|endraw|verbatim|endverbatim|with|endwith|without|endwithout)

  # Nunjucks operators
  nunjucks_operators: (?:and|or|not|in|is|if|else)

  # Built-in filters (updated for modern Nunjucks)
  nunjucks_filters: (?:abs|batch|capitalize|center|default|dictsort|escape|e|filesizeformat|first|float|forceescape|groupby|indent|int|join|last|length|list|lower|nl2br|random|reject|rejectattr|replace|reverse|round|safe|select|selectattr|slice|sort|string|striptags|sum|title|trim|truncate|upper|urlencode|urlize|wordcount|xmlattr|tojson)

contexts:
  main:
    - include: nunjucks-comments
    - include: nunjucks-variables
    - include: nunjucks-tags
    - include: html-content

  nunjucks-comments:
    # Block comments
    - match: "{% comment %}"
      scope: punctuation.definition.comment.begin.nunjucks-toolbox
      push:
        - meta_scope: comment.block.nunjucks-toolbox
        - match: "{% endcomment %}"
          scope: punctuation.definition.comment.end.nunjucks-toolbox
          pop: true

    # Line comments
    - match: "{#"
      scope: punctuation.definition.comment.begin.nunjucks-toolbox
      push:
        - meta_scope: comment.line.nunjucks-toolbox
        - match: "#}"
          scope: punctuation.definition.comment.end.nunjucks-toolbox
          pop: true

  nunjucks-variables:
    - match: "{{"
      scope: punctuation.section.interpolation.begin.nunjucks-toolbox
      push:
        - meta_scope: meta.interpolation.nunjucks-toolbox
        - match: "}}"
          scope: punctuation.section.interpolation.end.nunjucks-toolbox
          pop: true
        - include: nunjucks-expressions

  nunjucks-tags:
    # Template tags with whitespace control
    - match: "{%-?"
      scope: punctuation.section.tag.begin.nunjucks-toolbox
      push:
        - meta_scope: meta.tag.nunjucks-toolbox
        - match: "-?%}"
          scope: punctuation.section.tag.end.nunjucks-toolbox
          pop: true
        - include: nunjucks-tag-content

  nunjucks-tag-content:
    - match: \b({{nunjucks_tags}})\b
      scope: keyword.control.nunjucks-toolbox
    - match: \b({{nunjucks_operators}})\b
      scope: keyword.operator.nunjucks-toolbox
    - include: nunjucks-expressions

  nunjucks-expressions:
    # Strings
    - match: '"'
      scope: punctuation.definition.string.begin.nunjucks-toolbox
      push:
        - meta_scope: string.quoted.double.nunjucks-toolbox
        - match: '"'
          scope: punctuation.definition.string.end.nunjucks-toolbox
          pop: true
        - match: \\.
          scope: constant.character.escape.nunjucks-toolbox

    - match: "'"
      scope: punctuation.definition.string.begin.nunjucks-toolbox
      push:
        - meta_scope: string.quoted.single.nunjucks-toolbox
        - match: "'"
          scope: punctuation.definition.string.end.nunjucks-toolbox
          pop: true
        - match: \\.
          scope: constant.character.escape.nunjucks-toolbox

    # Numbers
    - match: \b\d+\.?\d*\b
      scope: constant.numeric.nunjucks-toolbox

    # Booleans and None
    - match: \b(true|false|none|null|undefined)\b
      scope: constant.language.nunjucks-toolbox

    # Filters
    - match: \|
      scope: punctuation.separator.filter.nunjucks-toolbox
      push:
        - match: \b({{nunjucks_filters}})\b
          scope: support.function.filter.nunjucks-toolbox
        - match: \w+
          scope: variable.function.filter.nunjucks-toolbox
        - match: (?=\||%}|}}|$)
          pop: true
        - include: nunjucks-filter-arguments

    # Variables and properties
    - match: \b[a-zA-Z_][a-zA-Z0-9_]*\b
      scope: variable.other.nunjucks-toolbox

    # Dot notation
    - match: \.
      scope: punctuation.accessor.nunjucks-toolbox

    # Array/object access
    - match: \[
      scope: punctuation.section.brackets.begin.nunjucks-toolbox
      push:
        - match: \]
          scope: punctuation.section.brackets.end.nunjucks-toolbox
          pop: true
        - include: nunjucks-expressions

  nunjucks-filter-arguments:
    - match: \(
      scope: punctuation.section.arguments.begin.nunjucks-toolbox
      push:
        - match: \)
          scope: punctuation.section.arguments.end.nunjucks-toolbox
          pop: true
        - include: nunjucks-expressions
        - match: ","
          scope: punctuation.separator.arguments.nunjucks-toolbox

  html-content:
    # XML declaration
    - match: (<\?)(xml)
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.xml.html
      push:
        - meta_scope: meta.tag.preprocessor.xml.html
        - match: (\?>)
          captures:
            1: punctuation.definition.tag.end.html
          pop: true
        - include: tag-generic-attribute
        - include: string-double-quoted
        - include: string-single-quoted

    # HTML comments
    - match: <!--
      scope: punctuation.definition.comment.begin.html
      push:
        - meta_scope: comment.block.html
        - match: "-->"
          scope: punctuation.definition.comment.end.html
          pop: true
        - match: "--"
          scope: invalid.illegal.bad-comments-or-CDATA.html

    # DOCTYPE
    - match: <!
      scope: punctuation.definition.tag.begin.html
      push:
        - meta_scope: meta.tag.sgml.html
        - match: ">"
          scope: punctuation.definition.tag.end.html
          pop: true
        - match: (?i:DOCTYPE)
          scope: entity.name.tag.doctype.html
          push:
            - meta_scope: meta.tag.sgml.doctype.html
            - match: (?=>)
              pop: true
            - match: '"[^">]*"'
              scope: string.quoted.double.doctype.identifiers-and-DTDs.html

    # Style tags with Nunjucks support
    - match: '(?i)(<)(style)\b'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.style.html
      push:
        - meta_scope: meta.tag.style.html
        - match: (?i)(</)(style)(>)
          captures:
            1: punctuation.definition.tag.begin.html
            2: entity.name.tag.style.html
            3: punctuation.definition.tag.end.html
          pop: true
        - include: tag-stuff
        - match: (>)
          scope: punctuation.definition.tag.end.html
          push:
            - meta_content_scope: source.css.embedded.html
            - match: (?i)(?=</style)
              pop: true
            - include: nunjucks-comments
            - include: nunjucks-variables
            - include: nunjucks-tags
            - include: scope:source.css

    # Script tags with Nunjucks support
    - match: '(?i)(<)(script)\b'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
      push:
        - meta_scope: meta.tag.script.html
        - match: (?i)(</)(script)(>)
          captures:
            1: punctuation.definition.tag.begin.html
            2: entity.name.tag.script.html
            3: punctuation.definition.tag.end.html
          pop: true
        - include: tag-stuff
        - match: (>)
          scope: punctuation.definition.tag.end.html
          push:
            - meta_content_scope: source.js.embedded.html
            - match: (?i)(?=</script)
              pop: true
            - include: nunjucks-comments
            - include: nunjucks-variables
            - include: nunjucks-tags
            - include: scope:source.js

    # HTML tags
    - match: '(</?)((?i:[a-z][a-z0-9]*))(?=\s|>|/>)'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.html
      push:
        - meta_scope: meta.tag.html
        - match: (/?>)
          scope: punctuation.definition.tag.end.html
          pop: true
        - include: tag-stuff

    # HTML entities
    - include: entities

    # Invalid characters
    - match: <>
      scope: invalid.illegal.incomplete.html
    - match: <
      scope: invalid.illegal.bad-angle-bracket.html

  tag-stuff:
    - include: tag-id-attribute
    - include: tag-generic-attribute
    - include: string-double-quoted
    - include: string-single-quoted
    - include: nunjucks-variables
    - include: nunjucks-tags

  tag-generic-attribute:
    - match: '\b([a-zA-Z\-:]+)(?=\s*=)'
      scope: entity.other.attribute-name.html
    - match: '\b([a-zA-Z\-:]+)'
      scope: entity.other.attribute-name.html

  tag-id-attribute:
    - match: \b(id)\s*(=)
      captures:
        1: entity.other.attribute-name.id.html
        2: punctuation.separator.key-value.html
      push:
        - meta_scope: meta.attribute-with-value.id.html
        - match: (?<="|')
          pop: true
        - include: string-double-quoted
        - include: string-single-quoted

  string-double-quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.html
      push:
        - meta_scope: string.quoted.double.html
        - match: '"'
          scope: punctuation.definition.string.end.html
          pop: true
        - include: nunjucks-comments
        - include: nunjucks-variables
        - include: nunjucks-tags
        - include: entities

  string-single-quoted:
    - match: "'"
      scope: punctuation.definition.string.begin.html
      push:
        - meta_scope: string.quoted.single.html
        - match: "'"
          scope: punctuation.definition.string.end.html
          pop: true
        - include: nunjucks-comments
        - include: nunjucks-variables
        - include: nunjucks-tags
        - include: entities

  entities:
    - match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
      scope: constant.character.entity.html
      captures:
        1: punctuation.definition.entity.html
        3: punctuation.definition.entity.html
    - match: "&"
      scope: invalid.illegal.bad-ampersand.html
