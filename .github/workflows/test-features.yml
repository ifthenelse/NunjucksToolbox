name: Test Package Features

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test-features:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install PyYAML

      - name: Test snippet syntax
        run: |
          if [ -f "Nunjucks-toolbox.sublime-snippets" ]; then
            echo "‚úÖ Snippets file found"
            python3 -c "import json; json.load(open('Nunjucks-toolbox.sublime-snippets')); print('‚úÖ Snippets JSON is valid')"
          else
            echo "‚ö†Ô∏è No snippets file found"
          fi

      - name: Test completions syntax
        run: |
          if [ -f "Nunjucks-toolbox.sublime-completions" ]; then
            echo "‚úÖ Completions file found"
            python3 -c "import json; json.load(open('Nunjucks-toolbox.sublime-completions')); print('‚úÖ Completions JSON is valid')"
          else
            echo "‚ö†Ô∏è No completions file found"
          fi

      - name: Test build system
        run: |
          if [ -f "Nunjucks.sublime-build" ]; then
            echo "‚úÖ Build system found"
            python3 -c "import json, sys; build = json.load(open('Nunjucks.sublime-build')); required = ['shell_cmd', 'selector']; missing = [k for k in required if k not in build]; print('‚ùå Missing keys:', missing) if missing else print('‚úÖ Build system valid'); sys.exit(1) if missing else None"
          else
            echo "‚ö†Ô∏è No build system file found"
          fi

      - name: Test preference files
        run: |
          found_prefs=false
          for file in *.tmPreferences; do
            if [ -f "$file" ]; then
              found_prefs=true
              echo "‚úÖ Found preference file: $file"
              python3 -c "import xml.etree.ElementTree as ET; ET.parse('$file'); print('‚úÖ $file is valid XML')" || echo "‚ùå XML error in $file"
            fi
          done
          if [ "$found_prefs" = false ]; then
            echo "‚ö†Ô∏è No preference files found"
          fi

      - name: Test syntax file structure
        run: |
          python3 << 'EOF'
          import yaml, sys
          try:
              with open('Nunjucks-toolbox.sublime-syntax') as f:
                  syntax = yaml.safe_load(f)
              required = ['name', 'file_extensions', 'scope', 'contexts']
              missing = [k for k in required if k not in syntax]
              if missing:
                  print('‚ùå Missing syntax keys:', missing)
                  sys.exit(1)
              contexts = syntax.get('contexts', {})
              if 'main' not in contexts:
                  print('‚ùå Missing main context')
                  sys.exit(1)
              print('‚úÖ Syntax file structure valid')
              print('  - Name:', syntax.get('name'))
              print('  - Extensions:', syntax.get('file_extensions'))
              print('  - Contexts:', len(contexts))
          except Exception as e:
              print('‚ùå Error validating syntax file:', e)
              sys.exit(1)
          EOF

      - name: Test file completeness
        run: |
          echo "üìã Package completeness check:"

          # Check required files
          missing_required=0

          if [ -f "Nunjucks-toolbox.sublime-syntax" ]; then
            echo "‚úÖ Required: Nunjucks-toolbox.sublime-syntax"
          else
            echo "‚ùå Missing required: Nunjucks-toolbox.sublime-syntax"
            missing_required=$((missing_required + 1))
          fi

          if [ -f "README.md" ]; then
            echo "‚úÖ Required: README.md"
          else
            echo "‚ùå Missing required: README.md"
            missing_required=$((missing_required + 1))
          fi

          # Check optional files
          optional_count=0

          if [ -f "Nunjucks-toolbox.sublime-snippets" ]; then
            echo "‚úÖ Optional: Nunjucks-toolbox.sublime-snippets"
            optional_count=$((optional_count + 1))
          fi

          if [ -f "Nunjucks-toolbox.sublime-completions" ]; then
            echo "‚úÖ Optional: Nunjucks-toolbox.sublime-completions"
            optional_count=$((optional_count + 1))
          fi

          if [ -f "Nunjucks.sublime-build" ]; then
            echo "‚úÖ Optional: Nunjucks.sublime-build"
            optional_count=$((optional_count + 1))
          fi

          if [ -f "Nunjucks Auto Pairs.sublime-settings" ]; then
            echo "‚úÖ Optional: Nunjucks Auto Pairs.sublime-settings"
            optional_count=$((optional_count + 1))
          fi

          pref_files=$(ls -1 *.tmPreferences 2>/dev/null | wc -l)
          if [ "$pref_files" -gt 0 ]; then
            echo "‚úÖ Optional: $pref_files preference files"
            optional_count=$((optional_count + 1))
          fi

          if [ $missing_required -gt 0 ]; then
            echo "‚ùå Missing $missing_required required files"
            exit 1
          fi

          echo "üìä Summary:"
          echo "  - Required files: 2/2 ‚úÖ"
          echo "  - Optional features: $optional_count found"

      - name: Test feature integration
        run: |
          echo "üîß Testing feature integration:"

          # Test if all scopes match
          main_scope="text.html.nunjucks-toolbox"

          # Check syntax file scope
          syntax_scope=$(python3 -c "import yaml; print(yaml.safe_load(open('Nunjucks-toolbox.sublime-syntax')).get('scope', ''))")
          if [ "$syntax_scope" = "$main_scope" ]; then
            echo "‚úÖ Syntax scope matches: $syntax_scope"
          else
            echo "‚ùå Syntax scope mismatch: $syntax_scope vs $main_scope"
          fi

          # Check other files scope consistency
          for file in *.tmPreferences; do
            if [ -f "$file" ]; then
              scope=$(python3 -c "import xml.etree.ElementTree as ET; root=ET.parse('$file').getroot(); elements = [elem.text for elem in root.iter() if elem.text and 'nunjucks-toolbox' in elem.text]; print(elements[0] if elements else 'none')")
              if [ "$scope" = "$main_scope" ]; then
                echo "‚úÖ $file scope matches"
              else
                echo "‚ö†Ô∏è $file scope: $scope"
              fi
            fi
          done

      - name: Validate package structure
        run: |
          echo "üîç Validating package structure:"

          # Test that all files use consistent scopes
          python3 << 'EOF'
          import yaml
          import xml.etree.ElementTree as ET
          import json
          import os

          main_scope = "text.html.nunjucks-toolbox"
          issues = []

          # Check syntax file
          try:
              with open('Nunjucks-toolbox.sublime-syntax') as f:
                  syntax = yaml.safe_load(f)
              if syntax.get('scope') != main_scope:
                  issues.append(f"Syntax file scope mismatch: {syntax.get('scope')}")
              else:
                  print("‚úÖ Syntax file scope correct")
          except Exception as e:
              issues.append(f"Error reading syntax file: {e}")

          # Check snippets/completions files
          for filename in ['Nunjucks-toolbox.sublime-snippets', 'Nunjucks-toolbox.sublime-completions']:
              if os.path.exists(filename):
                  try:
                      with open(filename) as f:
                          data = json.load(f)
                      if data.get('scope') != main_scope:
                          issues.append(f"{filename} scope mismatch: {data.get('scope')}")
                      else:
                          print(f"‚úÖ {filename} scope correct")
                  except Exception as e:
                      issues.append(f"Error reading {filename}: {e}")

          # Check build system
          if os.path.exists('Nunjucks.sublime-build'):
              try:
                  with open('Nunjucks.sublime-build') as f:
                      build = json.load(f)
                  if build.get('selector') != main_scope:
                      issues.append(f"Build system selector mismatch: {build.get('selector')}")
                  else:
                      print("‚úÖ Build system selector correct")
              except Exception as e:
                  issues.append(f"Error reading build system: {e}")

          # Check preference files
          for filename in os.listdir('.'):
              if filename.endswith('.tmPreferences'):
                  try:
                      tree = ET.parse(filename)
                      root = tree.getroot()
                      scopes = [elem.text for elem in root.iter() if elem.text and 'nunjucks-toolbox' in elem.text]
                      if scopes and main_scope in scopes:
                          print(f"‚úÖ {filename} scope correct")
                      else:
                          issues.append(f"{filename} scope issue: {scopes}")
                  except Exception as e:
                      issues.append(f"Error reading {filename}: {e}")

          if issues:
              print("‚ùå Package structure issues found:")
              for issue in issues:
                  print(f"  - {issue}")
              exit(1)
          else:
              print("‚úÖ Package structure validation passed")
          EOF

      - name: Generate feature report
        run: |
          echo "# Package Feature Report" > feature-report.md
          echo "" >> feature-report.md
          echo "## Available Features" >> feature-report.md

          if [ -f "Nunjucks-toolbox.sublime-syntax" ]; then
            echo "- ‚úÖ **Syntax Highlighting** (Nunjucks-toolbox.sublime-syntax)" >> feature-report.md
          fi

          if [ -f "Nunjucks-toolbox.sublime-snippets" ]; then
            echo "- ‚úÖ **Code Snippets** (Nunjucks-toolbox.sublime-snippets)" >> feature-report.md
          fi

          if [ -f "Nunjucks-toolbox.sublime-completions" ]; then
            echo "- ‚úÖ **Auto-completion** (Nunjucks-toolbox.sublime-completions)" >> feature-report.md
          fi

          if [ -f "Nunjucks.sublime-build" ]; then
            echo "- ‚úÖ **Build System** (Nunjucks.sublime-build)" >> feature-report.md
          fi

          if [ -f "Nunjucks Auto Pairs.sublime-settings" ]; then
            echo "- ‚úÖ **Auto-Pairing** (Nunjucks Auto Pairs.sublime-settings)" >> feature-report.md
          fi

          pref_count=$(ls -1 *.tmPreferences 2>/dev/null | wc -l)
          if [ "$pref_count" -gt 0 ]; then
            echo "- ‚úÖ **Editor Preferences** ($pref_count .tmPreferences files)" >> feature-report.md
            for file in *.tmPreferences; do
              if [ -f "$file" ]; then
                echo "  - $file" >> feature-report.md
              fi
            done
          fi

          echo "" >> feature-report.md
          echo "## Test Results" >> feature-report.md
          echo "- ‚úÖ All syntax files validated" >> feature-report.md
          echo "- ‚úÖ JSON/XML structure verified" >> feature-report.md
          echo "- ‚úÖ Scope consistency checked" >> feature-report.md
          echo "- ‚úÖ File completeness verified" >> feature-report.md
          echo "- ‚úÖ Package structure validated" >> feature-report.md

          echo "" >> feature-report.md
          echo "## File Extensions Supported" >> feature-report.md
          echo "- .nunjucks" >> feature-report.md
          echo "- .nunjs" >> feature-report.md
          echo "- .njk" >> feature-report.md
          echo "- .html (with Nunjucks syntax)" >> feature-report.md

          cat feature-report.md

      - name: Upload feature report
        uses: actions/upload-artifact@v4
        with:
          name: feature-report
          path: feature-report.md
