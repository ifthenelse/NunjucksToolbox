name: Release Package

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]

jobs:
  package-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Remove refs/tags/ prefix and v prefix if present
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
          else
            VERSION=${GITHUB_SHA::7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          echo "Full GITHUB_REF: $GITHUB_REF"

      - name: Create package directory
        run: |
          mkdir -p package/NunjucksToolbox
          echo "Package directory created"

      - name: Copy essential files
        run: |
          # Copy required files
          cp NunjucksToolbox.sublime-syntax package/NunjucksToolbox/
          cp README.md package/NunjucksToolbox/
          
          # Copy optional files if they exist
          [ -f "NunjucksToolbox.sublime-snippets" ] && cp NunjucksToolbox.sublime-snippets package/NunjucksToolbox/
          [ -f "NunjucksToolbox.sublime-completions" ] && cp NunjucksToolbox.sublime-completions package/NunjucksToolbox/
          [ -f "Nunjucks.sublime-build" ] && cp Nunjucks.sublime-build package/NunjucksToolbox/
          [ -f "Nunjucks Auto Pairs.sublime-settings" ] && cp "Nunjucks Auto Pairs.sublime-settings" package/NunjucksToolbox/
          
          # Copy preference files
          for file in *.tmPreferences; do
            if [ -f "$file" ]; then
              cp "$file" package/NunjucksToolbox/
            fi
          done
          
          echo "Files copied to package directory:"
          ls -la package/NunjucksToolbox/

      - name: Create package.json for Package Control
        run: |
          cat > package/NunjucksToolbox/package.json << EOF
          {
            "name": "NunjucksToolbox",
            "description": "Nunjucks templating syntax for Sublime Text",
            "version": "${{ steps.version.outputs.version }}",
            "keywords": ["nunjucks", "template", "syntax", "highlighting", "toolbox"],
            "homepage": "https://github.com/${{ github.repository }}",
            "bugs": "https://github.com/${{ github.repository }}/issues",
            "repository": {
              "type": "git",
              "url": "https://github.com/${{ github.repository }}.git"
            },
            "license": "MIT"
          }
          EOF
          echo "package.json created"

      - name: Create .sublime-package
        run: |
          # Create a clean version string for filename
          CLEAN_VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="NunjucksToolbox-${CLEAN_VERSION}.sublime-package"
          
          echo "Creating package: $PACKAGE_NAME"
          echo "Working directory: $(pwd)"
          echo "Package directory contents:"
          ls -la package/
          
          cd package
          zip -r "../${PACKAGE_NAME}" NunjucksToolbox/
          cd ..
          
          if [ -f "$PACKAGE_NAME" ]; then
            echo "✅ Package created successfully: $PACKAGE_NAME"
            echo "Package size: $(du -h "$PACKAGE_NAME" | cut -f1)"
            ls -la *.sublime-package
          else
            echo "❌ Package creation failed"
            exit 1
          fi

      - name: Verify package contents
        run: |
          PACKAGE_NAME="NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package"
          echo "📦 Package contents:"
          unzip -l "$PACKAGE_NAME"

      - name: Upload package to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package
          asset_name: NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package
          asset_content_type: application/zip

      - name: Generate package info
        run: |
          PACKAGE_NAME="NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package"
          
          echo "# Package Information" > package-info.md
          echo "" >> package-info.md
          echo "**Version:** ${{ steps.version.outputs.version }}" >> package-info.md
          echo "**Package Size:** $(du -h "$PACKAGE_NAME" | cut -f1)" >> package-info.md
          echo "**Created:** $(date)" >> package-info.md
          echo "" >> package-info.md
          echo "## Package Contents" >> package-info.md
          echo "\`\`\`" >> package-info.md
          unzip -l "$PACKAGE_NAME" >> package-info.md
          echo "\`\`\`" >> package-info.md
          
          echo "" >> package-info.md
          echo "## Features Included" >> package-info.md
          echo "- ✅ Syntax Highlighting (NunjucksToolbox.sublime-syntax)" >> package-info.md
          echo "- ✅ Code Snippets (NunjucksToolbox.sublime-snippets)" >> package-info.md
          echo "- ✅ Auto-completion (NunjucksToolbox.sublime-completions)" >> package-info.md
          echo "- ✅ Build System (Nunjucks.sublime-build)" >> package-info.md
          echo "- ✅ Auto-Pairing (Nunjucks Auto Pairs.sublime-settings)" >> package-info.md
          echo "- ✅ Editor Preferences (3 .tmPreferences files)" >> package-info.md
          
          cat package-info.md

      - name: Upload package info
        uses: actions/upload-artifact@v4
        with:
          name: package-info-${{ steps.version.outputs.version }}
          path: |
            NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package
            package-info.md

      - name: Generate changelog
        if: github.event_name == 'release'
        run: |
          echo "## Changes in ${{ steps.version.outputs.version }}" > changelog.md
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "" >> changelog.md
            echo "### Commits since $PREV_TAG:" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> changelog.md
          else
            echo "" >> changelog.md
            echo "### All commits:" >> changelog.md
            git log --pretty=format:"- %s (%h)" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "### Package Features:" >> changelog.md
          echo "- ✅ Syntax Highlighting ([NunjucksToolbox.sublime-syntax](NunjucksToolbox.sublime-syntax))" >> changelog.md
          echo "- ✅ Code Snippets ([NunjucksToolbox.sublime-snippets](NunjucksToolbox.sublime-snippets))" >> changelog.md
          echo "- ✅ Auto-completion ([NunjucksToolbox.sublime-completions](NunjucksToolbox.sublime-completions))" >> changelog.md
          echo "- ✅ Build System ([Nunjucks.sublime-build](Nunjucks.sublime-build))" >> changelog.md
          echo "- ✅ Auto-Pairing ([Nunjucks Auto Pairs.sublime-settings](Nunjucks Auto Pairs.sublime-settings))" >> changelog.md
          echo "- ✅ Editor Preferences (3 .tmPreferences files)" >> changelog.md
          
          cat changelog.md
