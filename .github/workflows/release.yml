name: Release

on:
  # Manual release (primary method)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.4.0)'
        required: true
        type: string
      release_notes:
        description: 'What changed in this release (optional - will use git commits if empty)'
        required: false
        type: string
      breaking_changes:
        description: 'Breaking changes (optional)'
        required: false
        type: string
      new_features:
        description: 'New features for README (optional)'
        required: false
        type: string
  
  # Also trigger on tag push (fallback for manual tags)
  push:
    tags: 
      - 'v*.*.*'
      - '*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Determine version and release mode
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            MODE="automated"
            echo "🚀 Running automated release for version: $VERSION"
          else
            # Extract version from tag (remove 'v' prefix if present)
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
            MODE="tag-triggered"
            echo "🏷️ Running tag-triggered release for version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Use semantic versioning (e.g., 1.4.0)"
            echo "   Got: ${{ steps.version.outputs.version }}"
            exit 1
          fi
          echo "✅ Version format valid: ${{ steps.version.outputs.version }}"

      - name: Check version consistency (tag-triggered mode)
        if: steps.version.outputs.mode == 'tag-triggered'
        run: |
          PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
          TAG_VERSION="${{ steps.version.outputs.version }}"
          
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch: package.json=$PACKAGE_VERSION, tag=$TAG_VERSION"
            echo "💡 In tag-triggered mode, package.json must already contain the correct version."
            echo "   Use manual workflow dispatch for automatic version updates."
            exit 1
          fi
          echo "✅ Version consistency verified: $TAG_VERSION"

      - name: Check if version already exists (automated mode)
        if: steps.version.outputs.mode == 'automated'
        run: |
          if git tag | grep -q "^v${{ steps.version.outputs.version }}$"; then
            echo "❌ Version v${{ steps.version.outputs.version }} already exists"
            exit 1
          fi
          echo "✅ Version v${{ steps.version.outputs.version }} is available"

      - name: Update package.json version (automated mode)
        if: steps.version.outputs.mode == 'automated'
        run: |
          node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          pkg.version = '${{ steps.version.outputs.version }}';
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          console.log('✅ Updated package.json to version ${{ steps.version.outputs.version }}');
          "

      - name: Generate changelog from commits
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            echo "Generating changelog from $LATEST_TAG to HEAD"
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20)
            CHANGELOG=$(echo "$COMMITS" | sed 's/^- /• /' | grep -v "^• chore:" | head -10)
          else
            echo "Generating changelog from beginning"
            CHANGELOG="• Initial release"
          fi
          
          # If no significant changes, provide a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="• Version bump and maintenance updates"
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Update README.md with new features (automated mode)
        if: steps.version.outputs.mode == 'automated'
        run: |
          # If new features were provided, add them to README
          if [ -n "${{ github.event.inputs.new_features }}" ]; then
            # Add new features to the Features section
            sed -i '/## Features/a\\n${{ github.event.inputs.new_features }}' README.md
            echo "✅ Added new features to README.md"
          fi
          
          # Update version references in README
          sed -i 's/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${{ steps.version.outputs.version }}/g' README.md
          sed -i 's/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${{ steps.version.outputs.version }}/g' README.md
          echo "✅ Updated README.md version references"

      - name: Update Messages/install.txt (automated mode)
        if: steps.version.outputs.mode == 'automated'
        run: |
          # Update version in install message
          sed -i 's/Nunjucks Toolbox v[0-9]\+\.[0-9]\+\.[0-9]\+/Nunjucks Toolbox v${{ steps.version.outputs.version }}/g' Messages/install.txt
          
          # Update GitHub URLs to use correct username
          sed -i 's|https://github.com/andreacollet/nunjucks-toolbox|https://github.com/ifthenelse/NunjucksToolbox|g' Messages/install.txt
          echo "✅ Updated Messages/install.txt"

      - name: Create version message file
        run: |
          # Use custom release notes if provided (automated mode), otherwise use generated changelog
          if [ "${{ steps.version.outputs.mode }}" = "automated" ] && [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_CONTENT="${{ github.event.inputs.release_notes }}"
          else
            RELEASE_CONTENT="${{ steps.changelog.outputs.CHANGELOG }}"
          fi
          
          # Create a concise release message focusing only on what's new
          cat > Messages/${{ steps.version.outputs.version }}.txt << EOF
          Nunjucks Toolbox v${{ steps.version.outputs.version }} - Release Notes
          =====================================================

          🆕 WHAT'S NEW:
          $RELEASE_CONTENT
          EOF

          # Add breaking changes if provided (automated mode only)
          if [ "${{ steps.version.outputs.mode }}" = "automated" ] && [ -n "${{ github.event.inputs.breaking_changes }}" ]; then
            cat >> Messages/${{ steps.version.outputs.version }}.txt << EOF

          ⚠️ BREAKING CHANGES:
          ${{ github.event.inputs.breaking_changes }}
          EOF
          fi

          # Add simple footer with correct GitHub URLs
          cat >> Messages/${{ steps.version.outputs.version }}.txt << EOF

          📖 Full documentation: https://github.com/ifthenelse/NunjucksToolbox
          🐛 Report issues: https://github.com/ifthenelse/NunjucksToolbox/issues

          Released on $(date +"%Y-%m-%d")
          EOF
          
          echo "✅ Created Messages/${{ steps.version.outputs.version }}.txt"

      - name: Update messages.json
        run: |
          node -e "
          const fs = require('fs');
          const messages = JSON.parse(fs.readFileSync('messages.json', 'utf8'));
          messages['${{ steps.version.outputs.version }}'] = 'Messages/${{ steps.version.outputs.version }}.txt';
          
          // Sort versions to keep them organized
          const sortedMessages = {};
          sortedMessages['install'] = messages['install'];
          
          // Sort version keys numerically
          const versionKeys = Object.keys(messages).filter(k => k !== 'install').sort((a, b) => {
            const parseVersion = v => v.split('.').map(Number);
            const aVer = parseVersion(a);
            const bVer = parseVersion(b);
            for (let i = 0; i < 3; i++) {
              if (aVer[i] !== bVer[i]) return aVer[i] - bVer[i];
            }
            return 0;
          });
          
          versionKeys.forEach(key => {
            sortedMessages[key] = messages[key];
          });
          
          fs.writeFileSync('messages.json', JSON.stringify(sortedMessages, null, 2) + '\n');
          console.log('✅ Updated messages.json with version ${{ steps.version.outputs.version }}');
          "

      - name: Commit and tag (automated mode)
        if: steps.version.outputs.mode == 'automated'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all updated files
          git add package.json README.md Messages/${{ steps.version.outputs.version }}.txt messages.json Messages/install.txt
          
          # Commit with detailed message
          git commit -m "chore: release v${{ steps.version.outputs.version }}

          - Updated package.json to version ${{ steps.version.outputs.version }}
          - Updated README.md version references and features
          - Updated Messages/install.txt
          - Created Messages/${{ steps.version.outputs.version }}.txt
          - Updated messages.json with new version reference"
          
          # Create tag pointing to the commit with version updates
          git tag -a v${{ steps.version.outputs.version }} -m "Release v${{ steps.version.outputs.version }}"
          
          # Push both the commit and the tag
          git push origin main
          git push origin v${{ steps.version.outputs.version }}
          
          echo "✅ Committed changes and created tag v${{ steps.version.outputs.version }}"

      - name: Create Sublime Text package
        run: |
          mkdir -p package/"Nunjucks Toolbox"
          
          # Copy organized structure
          [ -d "Syntaxes" ] && cp -r Syntaxes package/"Nunjucks Toolbox"/
          [ -d "Completions" ] && cp -r Completions package/"Nunjucks Toolbox"/
          [ -d "Snippets" ] && cp -r Snippets package/"Nunjucks Toolbox"/
          [ -d "Settings" ] && cp -r Settings package/"Nunjucks Toolbox"/
          [ -d "Preferences" ] && cp -r Preferences package/"Nunjucks Toolbox"/
          [ -d "BuildSystems" ] && cp -r BuildSystems package/"Nunjucks Toolbox"/
          [ -d "Messages" ] && cp -r Messages package/"Nunjucks Toolbox"/
          
          # Copy root files
          cp README.md package/"Nunjucks Toolbox"/
          cp package.json package/"Nunjucks Toolbox"/
          cp messages.json package/"Nunjucks Toolbox"/
          [ -f "LICENSE" ] && cp LICENSE package/"Nunjucks Toolbox"/
          [ -f "language-configuration.json" ] && cp language-configuration.json package/"Nunjucks Toolbox"/
          
          echo "Package contents:"
          find package/"Nunjucks Toolbox"/ -type f | sort
          
          # Create package
          cd package
          zip -r "../NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package" "Nunjucks Toolbox"/
          cd ..
          
          echo "✅ Created NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: Nunjucks Toolbox v${{ steps.version.outputs.version }}
          body: |
            # Nunjucks Toolbox v${{ steps.version.outputs.version }}

            ## 🆕 What's New
            ${{ steps.changelog.outputs.CHANGELOG }}

            ${{ (steps.version.outputs.mode == 'automated' && github.event.inputs.breaking_changes) && format('## ⚠️ Breaking Changes\n{0}\n', github.event.inputs.breaking_changes) || '' }}

            ## 📦 Installation

            ### Package Control (Recommended)
            1. Open Command Palette (`Ctrl+Shift+P`/`Cmd+Shift+P`)
            2. Run "Package Control: Install Package"
            3. Search for "Nunjucks Toolbox" and install

            ### Manual Installation
            Download `NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package` below and extract to your Sublime Text `Packages/` directory.

            ## 🔗 Links
            - 📖 [Documentation](https://github.com/ifthenelse/NunjucksToolbox)
            - 🐛 [Report Issues](https://github.com/ifthenelse/NunjucksToolbox/issues)
            - 📝 [Release Notes](./Messages/${{ steps.version.outputs.version }}.txt)

            **Full Changelog**: ${{ steps.changelog.outputs.LATEST_TAG }}...v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Sublime Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package
          asset_name: NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package
          asset_content_type: application/zip

      - name: Generate release summary
        run: |
          echo "# 🎉 Release Summary for v${{ steps.version.outputs.version }}" > release-summary.md
          echo "" >> release-summary.md
          echo "## 🚀 Release Mode: ${{ steps.version.outputs.mode }}" >> release-summary.md
          echo "" >> release-summary.md
          
          if [ "${{ steps.version.outputs.mode }}" = "automated" ]; then
            echo "## 📋 Files Updated (Automated Mode)" >> release-summary.md
            echo "- ✅ package.json: Updated version number" >> release-summary.md
            echo "- ✅ README.md: Updated version references + new features" >> release-summary.md
            echo "- ✅ Messages/install.txt: Updated version and GitHub URLs" >> release-summary.md
            echo "- ✅ Messages/${{ steps.version.outputs.version }}.txt: Created with changes only" >> release-summary.md
            echo "- ✅ messages.json: Added new version reference" >> release-summary.md
            echo "- ✅ Git: Committed changes and created tag" >> release-summary.md
          else
            echo "## 📋 Files Updated (Tag-Triggered Mode)" >> release-summary.md
            echo "- ✅ Messages/${{ steps.version.outputs.version }}.txt: Created with changes" >> release-summary.md
            echo "- ✅ messages.json: Added new version reference" >> release-summary.md
            echo "- ℹ️ Other files assumed to be pre-updated" >> release-summary.md
          fi
          
          echo "" >> release-summary.md
          echo "## 🔗 Repository URLs" >> release-summary.md
          echo "- All GitHub URLs use: https://github.com/ifthenelse/NunjucksToolbox" >> release-summary.md
          
          cat release-summary.md

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.version.outputs.version }}
          path: |
            NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package
            Messages/${{ steps.version.outputs.version }}.txt
            release-summary.md