name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., 1.4.0)"
        required: true
        type: string
      # Remove manual inputs - let AI generate everything

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Set version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "🚀 Running AI-powered release for version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Use semantic versioning (e.g., 1.4.0)"
            exit 1
          fi
          echo "✅ Version format valid: ${{ steps.version.outputs.version }}"

      - name: Analyze changes and generate content
        id: analyze
        run: |
          # Get the latest tag for comparison
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LATEST_TAG" ]; then
            echo "📊 Analyzing changes from $LATEST_TAG to HEAD..."
            
            # Get detailed change analysis
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%h|%s|%b" --no-merges)
            FILES_CHANGED=$(git diff --name-only $LATEST_TAG..HEAD)
            STATS=$(git diff --stat $LATEST_TAG..HEAD)
            
            # Categorize changes
            FEATURES=$(echo "$COMMITS" | grep -i "feat\|add\|new\|implement" | head -10)
            FIXES=$(echo "$COMMITS" | grep -i "fix\|bug\|error\|issue" | head -10)
            IMPROVEMENTS=$(echo "$COMMITS" | grep -i "improve\|enhance\|update\|refactor" | head -10)
            BREAKING=$(echo "$COMMITS" | grep -i "break\|breaking\|major" | head -5)
            
            # Check for specific file changes that indicate features
            NEW_SNIPPETS=$(echo "$FILES_CHANGED" | grep "Snippets/" | wc -l)
            SYNTAX_CHANGES=$(echo "$FILES_CHANGED" | grep "Syntaxes/" | wc -l)
            COMPLETION_CHANGES=$(echo "$FILES_CHANGED" | grep "Completions/" | wc -l)
            
          else
            echo "📊 Initial release detected"
            COMMITS="Initial release of Nunjucks Toolbox"
            FILES_CHANGED=$(find . -name "*.sublime-*" -o -name "*.json" -o -name "*.md" | head -20)
            FEATURES="Complete Nunjucks syntax highlighting and tooling"
            FIXES=""
            IMPROVEMENTS=""
            BREAKING=""
            NEW_SNIPPETS=$(find Snippets/ -name "*.sublime-snippet" 2>/dev/null | wc -l)
            SYNTAX_CHANGES=1
            COMPLETION_CHANGES=1
          fi

          # Store analysis for AI processing
          cat > change_analysis.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "latest_tag": "$LATEST_TAG",
            "commits": $(echo "$COMMITS" | jq -R . | jq -s .),
            "files_changed": $(echo "$FILES_CHANGED" | jq -R . | jq -s .),
            "stats": $(echo "$STATS" | jq -R . | jq -s .),
            "categories": {
              "features": $(echo "$FEATURES" | jq -R . | jq -s .),
              "fixes": $(echo "$FIXES" | jq -R . | jq -s .),
              "improvements": $(echo "$IMPROVEMENTS" | jq -R . | jq -s .),
              "breaking": $(echo "$BREAKING" | jq -R . | jq -s .)
            },
            "metrics": {
              "new_snippets": $NEW_SNIPPETS,
              "syntax_changes": $SYNTAX_CHANGES,
              "completion_changes": $COMPLETION_CHANGES
            }
          }
          EOF

          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "✅ Change analysis complete"

      - name: Generate AI-powered release notes
        id: ai_content
        run: |
          # Generate content and write to files (avoiding multiline output issues)
          node -e "
          const fs = require('fs');
          const analysis = JSON.parse(fs.readFileSync('change_analysis.json', 'utf8'));

          function generateReleaseNotes(analysis) {
            const { categories, metrics } = analysis;
            let notes = [];
            
            if (categories.features.length > 0 || metrics.new_snippets > 0) {
              notes.push('• Enhanced Nunjucks templating capabilities');
              if (metrics.new_snippets > 0) {
                notes.push(\`• Added \${metrics.new_snippets} new code snippets for faster development\`);
              }
              if (metrics.syntax_changes > 0) {
                notes.push('• Improved syntax highlighting and pattern recognition');
              }
              if (metrics.completion_changes > 0) {
                notes.push('• Enhanced auto-completion and IntelliSense features');
              }
            }
            
            if (categories.fixes.length > 0) {
              notes.push('• Fixed various bugs and improved stability');
              notes.push('• Enhanced error handling and validation');
            }
            
            if (categories.improvements.length > 0) {
              notes.push('• Performance optimizations and code improvements');
              notes.push('• Better integration with Sublime Text features');
            }
            
            const workflowFiles = analysis.files_changed.filter(f => f.includes('.github/'));
            if (workflowFiles.length > 0) {
              notes.push('• Improved development workflow and CI/CD processes');
            }
            
            const docFiles = analysis.files_changed.filter(f => f.includes('README') || f.includes('.md'));
            if (docFiles.length > 0) {
              notes.push('• Updated documentation and examples');
            }
            
            return notes.length > 0 ? notes.join('\n') : '• Version bump and maintenance updates';
          }

          function generateREADMEFeatures(analysis) {
            const { metrics, categories } = analysis;
            let features = [];
            
            if (metrics.new_snippets > 0) {
              features.push(\`- 📝 **\${metrics.new_snippets}+ New Snippets** - Additional code templates for faster development\`);
            }
            
            if (categories.features.some(f => f.includes('filter') || f.includes('completion'))) {
              features.push('- 🎯 **Enhanced Completions** - Improved auto-completion with better context awareness');
            }
            
            if (categories.features.some(f => f.includes('syntax') || f.includes('highlight'))) {
              features.push('- 🎨 **Advanced Highlighting** - Better syntax recognition and color schemes');
            }
            
            return features.join('\n');
          }

          function detectBreakingChanges(analysis) {
            const breaking = analysis.categories.breaking;
            if (breaking.length === 0) return '';
            
            return breaking.map(change => {
              if (change.includes('scope')) return '• Changed syntax scope - may require settings update';
              if (change.includes('rename')) return '• Renamed files or commands - check your configurations';
              if (change.includes('remove')) return '• Removed deprecated features';
              return '• Significant structural changes - review your setup';
            }).join('\n');
          }

          const releaseNotes = generateReleaseNotes(analysis);
          const readmeFeatures = generateREADMEFeatures(analysis);
          const breakingChanges = detectBreakingChanges(analysis);

          // Write to files
          fs.writeFileSync('release_notes.txt', releaseNotes);
          fs.writeFileSync('readme_features.txt', readmeFeatures);
          fs.writeFileSync('breaking_changes.txt', breakingChanges);

          console.log('✅ AI content generation complete');
          console.log('Release notes length:', releaseNotes.length);
          console.log('README features length:', readmeFeatures.length);
          console.log('Breaking changes length:', breakingChanges.length);
          "

          # Create simple boolean outputs instead of multiline content
          echo "has_breaking_changes=$([ -s breaking_changes.txt ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has_readme_features=$([ -s readme_features.txt ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "content_generated=true" >> $GITHUB_OUTPUT

          echo "✅ Content generation and outputs complete"

      - name: Update package.json version
        run: |
          node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          pkg.version = '${{ steps.version.outputs.version }}';
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          console.log('✅ Updated package.json to version ${{ steps.version.outputs.version }}');
          "

      - name: Update README.md with AI-generated features
        run: |
          # Add new features if any were generated
          if [ "${{ steps.ai_content.outputs.has_readme_features }}" = "true" ]; then
            echo "📝 Adding AI-generated features to README.md..."
            
            # Read the generated features and add them after the Features section
            if [ -s "readme_features.txt" ]; then
              # Create a temporary file with the new content
              awk '/## Features/ {print; print ""; while ((getline line < "readme_features.txt") > 0) print line; close("readme_features.txt"); next} 1' README.md > README_temp.md
              mv README_temp.md README.md
              echo "✅ Added new features to README.md"
            fi
          fi

          # Update version references
          sed -i 's/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${{ steps.version.outputs.version }}/g' README.md
          sed -i 's/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${{ steps.version.outputs.version }}/g' README.md
          echo "✅ Updated README.md version references"

      - name: Update Messages/install.txt
        run: |
          # Update version in install message
          sed -i 's/Nunjucks Toolbox v[0-9]\+\.[0-9]\+\.[0-9]\+/Nunjucks Toolbox v${{ steps.version.outputs.version }}/g' Messages/install.txt

          # Update GitHub URLs to use correct username
          sed -i 's|https://github.com/andreacollet/nunjucks-toolbox|https://github.com/ifthenelse/NunjucksToolbox|g' Messages/install.txt
          echo "✅ Updated Messages/install.txt"

      - name: Generate smart release message
        run: |
          # Create intelligent release message
          cat > Messages/${{ steps.version.outputs.version }}.txt << 'EOF'
          Nunjucks Toolbox v${{ steps.version.outputs.version }} - Release Notes
          =====================================================

          🆕 WHAT'S NEW:
          EOF

          # Append the actual content
          cat release_notes.txt >> Messages/${{ steps.version.outputs.version }}.txt

          # Add breaking changes if detected
          if [ "${{ steps.ai_content.outputs.has_breaking_changes }}" = "true" ]; then
            echo "" >> Messages/${{ steps.version.outputs.version }}.txt
            echo "⚠️ BREAKING CHANGES:" >> Messages/${{ steps.version.outputs.version }}.txt
            cat breaking_changes.txt >> Messages/${{ steps.version.outputs.version }}.txt
          fi

          # Add footer
          cat >> Messages/${{ steps.version.outputs.version }}.txt << 'EOF'

          📖 Full documentation: https://github.com/ifthenelse/NunjucksToolbox
          🐛 Report issues: https://github.com/ifthenelse/NunjucksToolbox/issues
          EOF

          echo "Released on $(date +"%Y-%m-%d")" >> Messages/${{ steps.version.outputs.version }}.txt

          echo "✅ Generated smart release message"

      - name: Update messages.json
        run: |
          node -e "
          const fs = require('fs');
          const messages = JSON.parse(fs.readFileSync('messages.json', 'utf8'));
          messages['${{ steps.version.outputs.version }}'] = 'Messages/${{ steps.version.outputs.version }}.txt';

          // Sort versions to keep them organized
          const sortedMessages = {};
          sortedMessages['install'] = messages['install'];

          // Sort version keys numerically
          const versionKeys = Object.keys(messages).filter(k => k !== 'install'). sort((a, b) => {
            const parseVersion = v => v.split('.').map(Number);
            const aVer = parseVersion(a);
            const bVer = parseVersion(b);
            for (let i = 0; i < 3; i++) {
              if (aVer[i] !== bVer[i]) return aVer[i] - bVer[i];
            }
            return 0;
          });

          versionKeys.forEach(key => {
            sortedMessages[key] = messages[key];
          });

          fs.writeFileSync('messages.json', JSON.stringify(sortedMessages, null, 2) + '\n');
          console.log('✅ Updated messages.json with version ${{ steps.version.outputs.version }}');
          "

      - name: Commit and tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add all updated files
          git add package.json README.md Messages/${{ steps.version.outputs.version }}.txt messages.json Messages/install.txt

          # Commit with detailed message
          git commit -m "chore: release v${{ steps.version.outputs.version }}

          - Updated package.json to version ${{ steps.version.outputs.version }}
          - Updated README.md version references and features
          - Updated Messages/install.txt
          - Created Messages/${{ steps.version.outputs.version }}.txt
          - Updated messages.json with new version reference"

          # Create tag pointing to the commit with version updates
          git tag -a v${{ steps.version.outputs.version }} -m "Release v${{ steps.version.outputs.version }}"

          # Push both the commit and the tag
          git push origin main
          git push origin v${{ steps.version.outputs.version }}

          echo "✅ Committed changes and created tag v${{ steps.version.outputs.version }}"

      - name: Create Sublime Text package
        run: |
          mkdir -p package/"Nunjucks Toolbox"

          # Copy organized structure
          [ -d "Syntaxes" ] && cp -r Syntaxes package/"Nunjucks Toolbox"/
          [ -d "Completions" ] && cp -r Completions package/"Nunjucks Toolbox"/
          [ -d "Snippets" ] && cp -r Snippets package/"Nunjucks Toolbox"/
          [ -d "Settings" ] && cp -r Settings package/"Nunjucks Toolbox"/
          [ -d "Preferences" ] && cp -r Preferences package/"Nunjucks Toolbox"/
          [ -d "BuildSystems" ] && cp -r BuildSystems package/"Nunjucks Toolbox"/
          [ -d "Messages" ] && cp -r Messages package/"Nunjucks Toolbox"/

          # Copy root files
          cp README.md package/"Nunjucks Toolbox"/
          cp package.json package/"Nunjucks Toolbox"/
          cp messages.json package/"Nunjucks Toolbox"/
          [ -f "LICENSE" ] && cp LICENSE package/"Nunjucks Toolbox"/
          [ -f "language-configuration.json" ] && cp language-configuration.json package/"Nunjucks Toolbox"/

          echo "Package contents:"
          find package/"Nunjucks Toolbox"/ -type f | sort

          # Create package
          cd package
          zip -r "../NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package" "Nunjucks Toolbox"/
          cd ..

          echo "✅ Created NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package"

      - name: Create GitHub Release
        id: create_release
        run: |
          # Create the GitHub release body from file
          cat > github_release_body.md << 'EOF'
          # Nunjucks Toolbox v${{ steps.version.outputs.version }}

          ## 🆕 What's New
          EOF

          cat release_notes.txt >> github_release_body.md

          if [ "${{ steps.ai_content.outputs.has_breaking_changes }}" = "true" ]; then
            echo "" >> github_release_body.md
            echo "## ⚠️ Breaking Changes" >> github_release_body.md
            cat breaking_changes.txt >> github_release_body.md
          fi

          cat >> github_release_body.md << 'EOF'

          ## 📦 Installation

          ### Package Control (Recommended)
          1. Open Command Palette (`Ctrl+Shift+P`/`Cmd+Shift+P`)
          2. Run "Package Control: Install Package"
          3. Search for "Nunjucks Toolbox" and install

          ### Manual Installation
          Download `NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package` below and extract to your Sublime Text `Packages/` directory.

          ## 🔗 Links
          - 📖 [Documentation](https://github.com/ifthenelse/NunjucksToolbox)
          - 🐛 [Report Issues](https://github.com/ifthenelse/NunjucksToolbox/issues)
          - 📝 [Release Notes](./Messages/${{ steps.version.outputs.version }}.txt)
          EOF

          if [ -n "${{ steps.analyze.outputs.LATEST_TAG }}" ]; then
            echo "" >> github_release_body.md
            echo "**Full Changelog**: ${{ steps.analyze.outputs.LATEST_TAG }}...v${{ steps.version.outputs.version }}" >> github_release_body.md
          fi

          # Create the release using GitHub CLI
          gh release create v${{ steps.version.outputs.version }} \
            --title "Nunjucks Toolbox v${{ steps.version.outputs.version }}" \
            --notes-file github_release_body.md \
            ./NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package

          echo "✅ Created GitHub Release v${{ steps.version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release summary
        run: |
          echo "# 🎉 Release Summary for v${{ steps.version.outputs.version }}" > release-summary.md
          echo "" >> release-summary.md
          echo "## 🚀 Release Mode: Manual" >> release-summary.md
          echo "" >> release-summary.md
          echo "## 📋 Files Updated" >> release-summary.md
          echo "- ✅ package.json: Updated version number" >> release-summary.md
          echo "- ✅ README.md: Updated version references + new features" >> release-summary.md
          echo "- ✅ Messages/install.txt: Updated version and GitHub URLs" >> release-summary.md
          echo "- ✅ Messages/${{ steps.version.outputs.version }}.txt: Created with changes only" >> release-summary.md
          echo "- ✅ messages.json: Added new version reference" >> release-summary.md
          echo "- ✅ Git: Committed changes and created tag" >> release-summary.md
          echo "" >> release-summary.md
          echo "## 🔗 Repository URLs" >> release-summary.md
          echo "- All GitHub URLs use: https://github.com/ifthenelse/NunjucksToolbox" >> release-summary.md

          cat release-summary.md

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.version.outputs.version }}
          path: |
            NunjucksToolbox-${{ steps.version.outputs.version }}.sublime-package
            Messages/${{ steps.version.outputs.version }}.txt
            release-summary.md
