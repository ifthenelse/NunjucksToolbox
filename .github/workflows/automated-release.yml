name: Automated Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.4.0)'
        required: true
        type: string
      release_notes:
        description: 'What changed in this release (optional - will use git commits if empty)'
        required: false
        type: string
      breaking_changes:
        description: 'Breaking changes (optional)'
        required: false
        type: string
      new_features:
        description: 'New features for README (optional)'
        required: false
        type: string

jobs:
  automated-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Use semantic versioning (e.g., 1.4.0)"
            exit 1
          fi
          echo "✅ Version format valid: ${{ github.event.inputs.version }}"

      - name: Check if version already exists
        run: |
          if git tag | grep -q "^v${{ github.event.inputs.version }}$"; then
            echo "❌ Version v${{ github.event.inputs.version }} already exists"
            exit 1
          fi
          echo "✅ Version v${{ github.event.inputs.version }} is available"

      - name: Update package.json version
        run: |
          node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          pkg.version = '${{ github.event.inputs.version }}';
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          console.log('✅ Updated package.json to version ${{ github.event.inputs.version }}');
          "

      - name: Generate changelog from commits
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            echo "Generating changelog from $LATEST_TAG to HEAD"
            # Get commits with better formatting
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20)
            # Get just the short descriptions
            CHANGELOG=$(echo "$COMMITS" | sed 's/^- /• /' | grep -v "^• chore:" | head -10)
          else
            echo "Generating changelog from beginning"
            CHANGELOG="• Initial release"
          fi
          
          # If no significant changes, provide a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="• Version bump and maintenance updates"
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Update README.md with new features
        run: |
          # If new features were provided, add them to README
          if [ -n "${{ github.event.inputs.new_features }}" ]; then
            # Add new features to the Features section
            sed -i '/## Features/a\\n${{ github.event.inputs.new_features }}' README.md
            echo "✅ Added new features to README.md"
          fi
          
          # Update version references in README
          sed -i 's/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${{ github.event.inputs.version }}/g' README.md
          sed -i 's/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${{ github.event.inputs.version }}/g' README.md
          echo "✅ Updated README.md version references"

      - name: Update Messages/install.txt
        run: |
          # Update version in install message
          sed -i 's/Nunjucks Toolbox v[0-9]\+\.[0-9]\+\.[0-9]\+/Nunjucks Toolbox v${{ github.event.inputs.version }}/g' Messages/install.txt
          
          # Update GitHub URLs to use correct username
          sed -i 's|https://github.com/andreacollet/nunjucks-toolbox|https://github.com/ifthenelse/NunjucksToolbox|g' Messages/install.txt
          echo "✅ Updated Messages/install.txt"

      - name: Create concise version message file
        run: |
          # Use custom release notes if provided, otherwise use generated changelog
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_CONTENT="${{ github.event.inputs.release_notes }}"
          else
            RELEASE_CONTENT="${{ steps.changelog.outputs.CHANGELOG }}"
          fi
          
          # Create a concise release message focusing only on what's new
          cat > Messages/${{ github.event.inputs.version }}.txt << EOF
          Nunjucks Toolbox v${{ github.event.inputs.version }} - Release Notes
          =====================================================

          🆕 WHAT'S NEW:
          $RELEASE_CONTENT
          EOF

          # Add breaking changes if provided
          if [ -n "${{ github.event.inputs.breaking_changes }}" ]; then
            cat >> Messages/${{ github.event.inputs.version }}.txt << EOF

          ⚠️ BREAKING CHANGES:
          ${{ github.event.inputs.breaking_changes }}
          EOF
          fi

          # Add simple footer with correct GitHub URLs
          cat >> Messages/${{ github.event.inputs.version }}.txt << EOF

          📖 Full documentation: https://github.com/ifthenelse/NunjucksToolbox
          🐛 Report issues: https://github.com/ifthenelse/NunjucksToolbox/issues

          Released on $(date +"%Y-%m-%d")
          EOF
          
          echo "✅ Created concise Messages/${{ github.event.inputs.version }}.txt"

      - name: Update messages.json
        run: |
          node -e "
          const fs = require('fs');
          const messages = JSON.parse(fs.readFileSync('messages.json', 'utf8'));
          messages['${{ github.event.inputs.version }}'] = 'Messages/${{ github.event.inputs.version }}.txt';
          
          // Sort versions to keep them organized
          const sortedMessages = {};
          sortedMessages['install'] = messages['install'];
          
          // Sort version keys numerically
          const versionKeys = Object.keys(messages).filter(k => k !== 'install').sort((a, b) => {
            const parseVersion = v => v.split('.').map(Number);
            const aVer = parseVersion(a);
            const bVer = parseVersion(b);
            for (let i = 0; i < 3; i++) {
              if (aVer[i] !== bVer[i]) return aVer[i] - bVer[i];
            }
            return 0;
          });
          
          versionKeys.forEach(key => {
            sortedMessages[key] = messages[key];
          });
          
          fs.writeFileSync('messages.json', JSON.stringify(sortedMessages, null, 2) + '\n');
          console.log('✅ Updated messages.json with version ${{ github.event.inputs.version }}');
          "

      - name: Commit all version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all updated files
          git add package.json README.md Messages/${{ github.event.inputs.version }}.txt messages.json Messages/install.txt
          
          # Commit with detailed message
          git commit -m "chore: release v${{ github.event.inputs.version }}

          - Updated package.json to version ${{ github.event.inputs.version }}
          - Updated README.md version references and features
          - Updated Messages/install.txt
          - Created Messages/${{ github.event.inputs.version }}.txt
          - Updated messages.json with new version reference"
          
          echo "✅ Committed all version updates"

      - name: Create and push tag
        run: |
          # Create tag pointing to the commit with version updates
          git tag -a v${{ github.event.inputs.version }} -m "Release v${{ github.event.inputs.version }}"
          
          # Push both the commit and the tag
          git push origin main
          git push origin v${{ github.event.inputs.version }}
          
          echo "✅ Created and pushed tag v${{ github.event.inputs.version }}"

      - name: Create Sublime Text package
        run: |
          mkdir -p package/"Nunjucks Toolbox"
          
          # Copy organized structure
          [ -d "Syntaxes" ] && cp -r Syntaxes package/"Nunjucks Toolbox"/
          [ -d "Completions" ] && cp -r Completions package/"Nunjucks Toolbox"/
          [ -d "Snippets" ] && cp -r Snippets package/"Nunjucks Toolbox"/
          [ -d "Settings" ] && cp -r Settings package/"Nunjucks Toolbox"/
          [ -d "Preferences" ] && cp -r Preferences package/"Nunjucks Toolbox"/
          [ -d "BuildSystems" ] && cp -r BuildSystems package/"Nunjucks Toolbox"/
          [ -d "Messages" ] && cp -r Messages package/"Nunjucks Toolbox"/
          
          # Copy root files
          cp README.md package/"Nunjucks Toolbox"/
          cp package.json package/"Nunjucks Toolbox"/
          cp messages.json package/"Nunjucks Toolbox"/
          [ -f "LICENSE" ] && cp LICENSE package/"Nunjucks Toolbox"/
          [ -f "language-configuration.json" ] && cp language-configuration.json package/"Nunjucks Toolbox"/
          
          echo "Package contents:"
          find package/"Nunjucks Toolbox"/ -type f | sort
          
          # Create package
          cd package
          zip -r "../NunjucksToolbox-${{ github.event.inputs.version }}.sublime-package" "Nunjucks Toolbox"/
          cd ..
          
          echo "✅ Created NunjucksToolbox-${{ github.event.inputs.version }}.sublime-package"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Nunjucks Toolbox v${{ github.event.inputs.version }}
          body: |
            # Nunjucks Toolbox v${{ github.event.inputs.version }}

            ## 🆕 What's New
            ${{ steps.changelog.outputs.CHANGELOG }}

            ${{ github.event.inputs.breaking_changes && format('## ⚠️ Breaking Changes\n{0}\n', github.event.inputs.breaking_changes) || '' }}

            ## 📦 Installation

            ### Package Control (Recommended)
            1. Open Command Palette (`Ctrl+Shift+P`/`Cmd+Shift+P`)
            2. Run "Package Control: Install Package"
            3. Search for "Nunjucks Toolbox" and install

            ### Manual Installation
            Download `NunjucksToolbox-${{ github.event.inputs.version }}.sublime-package` below and extract to your Sublime Text `Packages/` directory.

            ## 🔗 Links
            - 📖 [Documentation](https://github.com/ifthenelse/NunjucksToolbox)
            - 🐛 [Report Issues](https://github.com/ifthenelse/NunjucksToolbox/issues)
            - 📝 [Release Notes](./Messages/${{ github.event.inputs.version }}.txt)

            **Full Changelog**: ${{ steps.changelog.outputs.LATEST_TAG }}...v${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload Sublime Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./NunjucksToolbox-${{ github.event.inputs.version }}.sublime-package
          asset_name: NunjucksToolbox-${{ github.event.inputs.version }}.sublime-package
          asset_content_type: application/zip

      - name: Generate release summary
        run: |
          echo "# 🎉 Release Summary for v${{ github.event.inputs.version }}" > release-summary.md
          echo "" >> release-summary.md
          echo "## 📋 Files Updated" >> release-summary.md
          echo "- ✅ package.json: Updated version number" >> release-summary.md
          echo "- ✅ README.md: Updated version references + new features" >> release-summary.md
          echo "- ✅ Messages/install.txt: Updated version and GitHub URLs" >> release-summary.md
          echo "- ✅ Messages/${{ github.event.inputs.version }}.txt: Created with changes only" >> release-summary.md
          echo "- ✅ messages.json: Added new version reference" >> release-summary.md
          echo "" >> release-summary.md
          echo "## 🔗 Repository URLs" >> release-summary.md
          echo "- All GitHub URLs now use: https://github.com/ifthenelse/NunjucksToolbox" >> release-summary.md
          
          cat release-summary.md

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ github.event.inputs.version }}
          path: |
            NunjucksToolbox-${{ github.event.inputs.version }}.sublime-package
            Messages/${{ github.event.inputs.version }}.txt
            release-summary.md